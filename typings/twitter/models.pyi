"""
This type stub file was generated by pyright.
"""

class TwitterModel(object):
    """ Base class from which all twitter models will inherit. """
    def __init__(self, **kwargs) -> None:
        ...
    
    def __str__(self) -> str:
        """ Returns a string representation of TwitterModel. By default
        this is the same as AsJsonString(). """
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __ne__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def AsJsonString(self, ensure_ascii=...):
        """ Returns the TwitterModel as a JSON string based on key/value
        pairs returned from the AsDict() method. """
        ...
    
    def AsDict(self):
        """ Create a dictionary representation of the object. Please see inline
        comments on construction when dictionaries contain TwitterModels. """
        ...
    
    @classmethod
    def NewFromJsonDict(cls, data, **kwargs):
        """ Create a new instance based on a JSON dict. Any kwargs should be
        supplied by the inherited, calling class.

        Args:
            data: A JSON dict, as converted from the JSON in the twitter API.

        """
        ...
    


class Media(TwitterModel):
    """A class representing the Media component of a tweet. """
    def __init__(self, **kwargs) -> None:
        ...
    
    def __repr__(self):
        ...
    


class List(TwitterModel):
    """A class representing the List structure used by the twitter API. """
    def __init__(self, **kwargs) -> None:
        ...
    
    def __repr__(self):
        ...
    


class Category(TwitterModel):
    """A class representing the suggested user category structure. """
    def __init__(self, **kwargs) -> None:
        ...
    
    def __repr__(self):
        ...
    


class DirectMessage(TwitterModel):
    """A class representing a Direct Message. """
    def __init__(self, **kwargs) -> None:
        ...
    
    def __repr__(self):
        ...
    


class Trend(TwitterModel):
    """ A class representing a trending topic. """
    def __init__(self, **kwargs) -> None:
        ...
    
    def __repr__(self):
        ...
    
    @property
    def volume(self):
        ...
    


class Hashtag(TwitterModel):
    """ A class representing a twitter hashtag. """
    def __init__(self, **kwargs) -> None:
        ...
    
    def __repr__(self):
        ...
    


class Url(TwitterModel):
    """ A class representing an URL contained in a tweet. """
    def __init__(self, **kwargs) -> None:
        ...
    
    def __repr__(self):
        ...
    


class UserStatus(TwitterModel):
    """ A class representing the UserStatus structure. This is an abbreviated
    form of the twitter.User object. """
    _connections = ...
    def __init__(self, **kwargs) -> None:
        ...
    
    @property
    def connections(self):
        ...
    
    def __repr__(self):
        ...
    


class User(TwitterModel):
    """A class representing the User structure. """
    def __init__(self, **kwargs) -> None:
        ...
    
    def __repr__(self):
        ...
    
    @classmethod
    def NewFromJsonDict(cls, data, **kwargs):
        ...
    


class Status(TwitterModel):
    """A class representing the Status structure used by the twitter API.
    """
    def __init__(self, **kwargs) -> None:
        ...
    
    @property
    def created_at_in_seconds(self):
        """ Get the time this status message was posted, in seconds since
        the epoch (1 Jan 1970).

        Returns:
            int: The time this status message was posted, in seconds since
            the epoch.
        """
        ...
    
    def __repr__(self):
        """ A string representation of this twitter.Status instance.
        The return value is the ID of status, username and datetime.

        Returns:
            string: A string representation of this twitter.Status instance with
            the ID of status, username and datetime.
        """
        ...
    
    @classmethod
    def NewFromJsonDict(cls, data, **kwargs):
        """ Create a new instance based on a JSON dict.

        Args:
            data: A JSON dict, as converted from the JSON in the twitter API

        Returns:
            A twitter.Status instance
        """
        ...
    


